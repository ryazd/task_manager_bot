from aiogram import Router, types
from aiogram.filters.state import State, StatesGroup
from aiogram.filters import Command
from sqlalchemy import select, func
from db import Task, async_session
from .keyboards import get_task_keyboard
from aiogram.utils.keyboard import InlineKeyboardBuilder, InlineKeyboardButton
import math
from typing import Union
from aiogram.fsm.context import FSMContext
from datetime import datetime


command_router = Router()


class AddTaskState(StatesGroup):
    waiting_for_text = State()
    waiting_for_deadline = State()


@command_router.message(Command('start'))
async def cmd_start(message: types.Message):
    await message.answer("""–Ø –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∞–º–∏. –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/add - –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É
/list - —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á
""")


@command_router.message(Command('add'))
async def cmd_add_task(message: types.Message, state: FSMContext):
    await message.answer('–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏:')
    await state.set_state(AddTaskState.waiting_for_text)


@command_router.message(AddTaskState.waiting_for_text)
async def process_task_text(message: types.Message, state: FSMContext):
    await state.update_data(text=message.text)
    await message.answer("–£–∫–∞–∂–∏—Ç–µ –¥–µ–¥–ª–∞–π–Ω (–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /skip): \n–§–æ—Ä–º–∞—Ç: –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú\n–ü—Ä–∏–º–µ—Ä: 25.12.2025 10:00")
    await state.set_state(AddTaskState.waiting_for_deadline)


@command_router.message(AddTaskState.waiting_for_deadline, Command('skip'))
async def skip_deadline(message: types.Message, state: FSMContext):
    data = await state.get_data()
    await create_task(message.from_user.id, data['text'], None)
    await message.answer("‚úÖ –ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –±–µ–∑ –¥–µ–¥–ª–∞–π–Ω–∞")


@command_router.message(AddTaskState.waiting_for_deadline)
async def process_task_deadline(message: types.Message, state: FSMContext):
    try:
        deadline = datetime.strptime(message.text, '%d.%m.%Y %H:%M')
        data = await state.get_data()
        await create_task(message.from_user.id, data['text'], deadline)
        await message.answer(f"‚úÖ –ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞, –¥–µ–¥–ª–∞–π–Ω: {deadline.strftime('%d.%m.%Y %H:%M')}")
    except ValueError:
        await message.answer('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.')
    await state.clear()


async def create_task(user_id: int, text: str, deadline: Union[datetime, None] = None):
    async with async_session() as session:
        task = Task(
            user_id=user_id,
            text=text,
            dead_line=deadline
        )
        session.add(task)
        await session.commit()


@command_router.message(Command('list'))
async def cmd_list_tasks(message: types.Message, user_id: Union[int, None] = None,page: int = 1, limit: int = 5):
    async with async_session() as session:
        total_tasks = await session.scalar(
            select(func.count(Task.id))\
            .where(Task.user_id==(message.from_user.id if not user_id else user_id))
        )
        if page > 1 and (page - 1) * limit >= total_tasks:
            page -= 1
        query = select(Task)\
            .where(Task.user_id==(message.from_user.id if not user_id else user_id))\
            .order_by(Task.id)\
            .offset((page-1)*limit)\
            .limit(limit)
        result = await session.execute(query)
        tasks = result.scalars().all()

    if not tasks:
        if user_id:
            await message.edit_text('–í–∞—à —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –ø—É—Å—Ç.')    
        else:
            await message.answer('–í–∞—à —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –ø—É—Å—Ç.')
        return
    
    now = datetime.now()
    tasks_text = "üìã –í–∞—à–∏ –∑–∞–¥–∞—á–∏:\n\n" + "\n".join(
        f"{'‚úÖ' if task.is_done else '‚ùå' if not task.dead_line or now < task.dead_line else 'üî¥'} {i+1 + (page-1)*limit}. {task.text} {task.dead_line if task.dead_line else ''}"
        for i, task in enumerate(tasks)
    )
    
    builder = InlineKeyboardBuilder()
    for i, task in enumerate(tasks):
        if not task.is_done:
            builder.button(
                text=f"‚úÖ –í—ã–ø–æ–ª–Ω–∏—Ç—å {i+1 + (page-1)*limit}", 
                callback_data=f"complete_{task.id}_{page}"
            )
        else:
            builder.button(
                text=f"‚ùå –ü–µ—Ä–µ–¥–µ–ª–∞—Ç—å {i+1 + (page-1)*limit}", 
                callback_data=f"uncomplete_{task.id}_{page}"
            )
        builder.button(
            text=f"‚ùå –£–¥–∞–ª–∏—Ç—å {i+1 + (page-1)*limit}", 
            callback_data=f"delete_{task.id}_{page}"
        )
    
    # –ö–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    pagination_buttons = []
    if page > 1:
        pagination_buttons.append(
            InlineKeyboardButton(text="‚óÄ –ù–∞–∑–∞–¥", callback_data=f"page_{page - 1}")
        )
    if (page * limit) < total_tasks:
        pagination_buttons.append(
            InlineKeyboardButton(text="–í–ø–µ—Ä—ë–¥ ‚ñ∂", callback_data=f"page_{page + 1}")
        )
    
    if pagination_buttons:
        builder.row(*pagination_buttons)
    
    builder.adjust(2)
    if user_id:
        await message.edit_text(
            f"{tasks_text}\n\n–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page}/{math.ceil(total_tasks / limit)}",
            reply_markup=builder.as_markup()
        )
    else:
        await message.answer(
            f"{tasks_text}\n\n–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page}/{math.ceil(total_tasks / limit)}",
            reply_markup=builder.as_markup()
        )

